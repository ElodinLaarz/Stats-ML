{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":115417088},"metadata":{"colab":{"name":"StatsTut.ipynb","provenance":[]},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.4"}},"type":"settings"}
{"cell_type":"code","exec_count":1,"id":"fd3420","input":"# Auto-reload\n%load_ext autoreload\n%autoreload 2","metadata":{"colab":{},"colab_type":"code","id":"QjUxH3OJ0M6U"},"pos":0,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"729dfd","input":"# Visualization with the first two principal components\npca = PCA(n_components=2)\nX_std = StandardScaler().fit_transform(X)\nX_pca = pca.fit_transform(X_std)\n\nfor i, col in enumerate(('blue', 'red', 'green')):\n    plt.scatter(X_pca[y==i, 0], X_pca[y==i, 1], label=names[i], c=col)\nplt.xlabel('Principal Component 1')\nplt.ylabel('Principal Component 2')\nplt.legend(loc='best')","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":302},"colab_type":"code","id":"As8SrWAZ0M6r","outputId":"9407bd13-aec0-4cea-b8f5-3e3077456010"},"output":{"0":{"data":{"text/plain":"<matplotlib.legend.Legend at 0x1e449a31d88>"},"exec_count":10,"output_type":"execute_result"},"1":{"data":{"image/png":"3dbe764b76cd8f66f481923ba86042b3401431d1","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"5d338a","input":"from mnist import MNIST\n\ndef load_training():\n    mndata = MNIST('./data')\n    mndata.gz = True\n    X_train, labels_train = map(np.array, mndata.load_training())\n    X_train = X_train / 255.0\n    return(X_train, labels_train)\n\nX, y0 = load_training()\nprint(X.shape)","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":357},"colab_type":"code","id":"MGAixfZx0M6t","outputId":"c3bfee92-e42b-4d6b-a8ab-e0b74ddf8e73"},"output":{"0":{"name":"stdout","output_type":"stream","text":"(60000, 784)\n"}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"4ef8b5","input":"# if n_components is not set all components are kept (784 in this case)\npca = PCA()\nX_std = StandardScaler().fit_transform(X)\npca.fit(X_std)","metadata":{"colab":{},"colab_type":"code","id":"ZEsEfPzx0M6v"},"output":{"0":{"data":{"text/plain":"PCA(copy=True, iterated_power='auto', n_components=None, random_state=None,\n    svd_solver='auto', tol=0.0, whiten=False)"},"exec_count":12,"output_type":"execute_result"}},"pos":11,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"ed1f64","input":"var_exp = pca.explained_variance_\ncum_var_prop = np.cumsum(var_exp) / np.sum(var_exp) * 100\n\nplt.figure(figsize=(10, 5))\nplt.step(range(1, 785), cum_var_prop)\nplt.ylabel('Cumulative explained variance')\nplt.xlabel('Number of principal components')\nplt.axhline(y = 99, color='y', linestyle='--', label = '99% explained variance')\nplt.axhline(y = 95, color='k', linestyle='--', label = '95% explained variance')\nplt.axhline(y = 90, color='c', linestyle='--', label = '90% explained variance')\nplt.axhline(y = 85, color='r', linestyle='--', label = '85% explained variance')\nplt.legend(loc='best')","metadata":{"colab":{},"colab_type":"code","id":"9yahjSci0M6x"},"output":{"0":{"data":{"text/plain":"<matplotlib.legend.Legend at 0x1e449edd8c8>"},"exec_count":13,"output_type":"execute_result"},"1":{"data":{"image/png":"30069a2e039c2ac3eeaf6c3296b2a68ecfd3badf","text/plain":"<Figure size 720x360 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":12,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"c9fa80","input":"# Adding 1 to the end of value in list as principal components start from 1 and indexes start from 0 (np.argmax)\nnum_components = [np.argmax(cum_var_prop > 99) + 1, np.argmax(cum_var_prop > 95) + 1,\n                      np.argmax(cum_var_prop > 90) + 1, np.argmax(cum_var_prop >= 85) + 1]\nprint(num_components)","metadata":{"colab":{},"colab_type":"code","id":"Vtou_Mfe0M6z"},"output":{"0":{"name":"stdout","output_type":"stream","text":"[543, 331, 236, 185]\n"}},"pos":13,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"b934d9","input":"def plot_approximation(num, percent, images): \n    pca = PCA(n_components=num)\n    pca.fit(images)\n    components = pca.transform(images)\n    approx = pca.inverse_transform(components)\n\n    plt.imshow(approx[0].reshape(28, 28), cmap = 'gray')\n    plt.xlabel(str(num) + ' Components', fontsize = 12)\n    plt.title(str(percent) + '% of Explained Variance', fontsize = 14)\n\n\nfive_plot = plt.figure(figsize=(20,4))\n\nplt.subplot(1, 5, 1)\nplt.imshow(X[0].reshape(28,28), cmap = 'gray')\nplt.xlabel('784 Components', fontsize = 12)\nplt.title('Original Image', fontsize = 14)\n\nfor i, (num, percent) in enumerate(zip(num_components, [99, 95, 90, 85])):\n    plt.subplot(1, 5, i+2)\n    plot_approximation(num, percent, X)","metadata":{"colab":{},"colab_type":"code","id":"vQsJs3Gh0M61"},"output":{"0":{"data":{"image/png":"7f85e619c72f744ab47abcf7d78aee1ccd61611c","text/plain":"<Figure size 1440x288 with 5 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":14,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"80d406","input":"X1 = rs.normal(size=(100, 2))\nX2 = rs.normal(3, 1, size=(100, 2))\nX3 = rs.normal(6, 1, size=(100, 2))\ny = np.repeat([0, 1, 2], 100)\nX = np.concatenate((X1, X2, X3))","metadata":{"colab":{},"colab_type":"code","id":"HCVabpWX0M69"},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"39a1d1","input":"from sklearn.cluster import KMeans\nkmeans = KMeans(n_clusters=3, random_state=11719)\nkmeans.fit(X)\n\nlabels = kmeans.predict(X)\nprint(labels)","metadata":{"colab":{},"colab_type":"code","id":"LV3eQ7-e0M6-"},"output":{"0":{"name":"stdout","output_type":"stream","text":"[2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n 2 2 2 2 2 2 2 2 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2\n 2 0 2 2 2 2 2 2 2 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n 1 1 1 1]\n"}},"pos":16,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"8c6fb0","input":"my_cmap = sns.diverging_palette(255, 133, l=60, n=7, center=\"dark\", as_cmap=True)\n\nplt.scatter(X[:, 0], X[:, 1], c=y,cmap='gray')\nplt.title('Colored by true classes')\nplt.show()\n\nplt.scatter(X[:, 0], X[:, 1], c=labels,cmap='gray')\nplt.title('Colored by clusters of k-means')","metadata":{"colab":{},"colab_type":"code","id":"PbS32GSk0M7A"},"output":{"0":{"data":{"image/png":"d54da022c94d40da3b6954ab62be86a7f1259582","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"1":{"data":{"text/plain":"Text(0.5, 1.0, 'Colored by clusters of k-means')"},"exec_count":18,"output_type":"execute_result"},"2":{"data":{"image/png":"4cb9aa0e20ba2f637386c7c43587b6e79d3f9fd0","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":17,"type":"cell"}
{"cell_type":"code","exec_count":19,"id":"16a05f","input":"from sklearn.metrics import confusion_matrix\n\nprint(confusion_matrix(y, labels))","metadata":{"colab":{},"colab_type":"code","id":"tuphTCz90M7E"},"output":{"0":{"name":"stdout","output_type":"stream","text":"[[  3   0  97]\n [100   0   0]\n [  1  99   0]]\n"}},"pos":18,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"bae32c","input":"import numpy as np\n\n# Setting a random seed for reproducibility\nrs = np.random.RandomState(seed=123)\n\nrs.uniform()\n\n# Generating a random array\nX = rs.uniform(low=0.0, high=1.0, size=(3, 5))  # a 3 x 5 array\n\nprint(X)","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":68},"colab_type":"code","id":"ia5C6J8d0M6Y","outputId":"0b30831e-3e92-4e6d-ebc9-54e0c36dd709"},"output":{"0":{"name":"stdout","output_type":"stream","text":"[[0.69646919 0.28613933 0.22685145 0.55131477 0.71946897]\n [0.42310646 0.9807642  0.68482974 0.4809319  0.39211752]\n [0.34317802 0.72904971 0.43857224 0.0596779  0.39804426]]\n"}},"pos":1,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"6cd834","input":"kmeans = KMeans(n_clusters=2, random_state=11719)\nlabels = kmeans.fit_predict(X)\nplt.scatter(X[:, 0], X[:, 1], c=labels,cmap=my_cmap)","metadata":{"colab":{},"colab_type":"code","id":"GNfkGOes0M7G"},"output":{"0":{"data":{"text/plain":"<matplotlib.collections.PathCollection at 0x1e452852548>"},"exec_count":20,"output_type":"execute_result"},"1":{"data":{"image/png":"eb733f4143ab7b7ef09a99e11cb522c968a2a09d","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":19,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"a73a5f","input":"krange = range(2, 10)\nobj = np.zeros(len(krange))\nfor k in krange:\n    kmeans = KMeans(n_clusters=k, random_state=1172019).fit(X)\n    obj[k-2] = kmeans.inertia_\nplt.plot(krange, obj)","metadata":{"colab":{},"colab_type":"code","id":"anOhp02S0M7I"},"output":{"0":{"data":{"text/plain":"[<matplotlib.lines.Line2D at 0x1e451f40488>]"},"exec_count":21,"output_type":"execute_result"},"1":{"data":{"image/png":"6d3b61cd4b41d4d05bc03a1932ff71c26e32d769","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":20,"type":"cell"}
{"cell_type":"code","exec_count":22,"id":"95b5f3","input":"def move_outward(x, r):\n    new_x = x + x / np.sqrt(np.sum(x**2, 1))[:, np.newaxis] * r\n    return new_x\n\nX1 = move_outward(rs.normal(scale=0.25, size=(150, 2)), 1)\nX2 = move_outward(rs.normal(scale=0.25, size=(150, 2)), 2.8)\nX3 = move_outward(rs.normal(scale=0.25, size=(150, 2)), 5)\ny = np.repeat([0, 1, 2], 150)\nX = np.concatenate((X1, X2, X3))\n\nplt.scatter(X[:, 0], X[:, 1], c=y,cmap=my_cmap)\nplt.title('Colored by true classes')","metadata":{"colab":{},"colab_type":"code","id":"ZnCpI07a0M7K"},"output":{"0":{"data":{"text/plain":"Text(0.5, 1.0, 'Colored by true classes')"},"exec_count":22,"output_type":"execute_result"},"1":{"data":{"image/png":"9751726ddf1f7e37ce38e8d01d4a49ad829435b8","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":21,"type":"cell"}
{"cell_type":"code","exec_count":23,"id":"a44857","input":"kmeans = KMeans(n_clusters=3, random_state=11719)\nlabels = kmeans.fit_predict(X)\nplt.scatter(X[:, 0], X[:, 1], c=labels,cmap=my_cmap)","metadata":{"colab":{},"colab_type":"code","id":"-tk7fTRQ0M7M"},"output":{"0":{"data":{"text/plain":"<matplotlib.collections.PathCollection at 0x1e45297fa08>"},"exec_count":23,"output_type":"execute_result"},"1":{"data":{"image/png":"81e4f6f0f01d99b0df9aecf7988c19159a189a58","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":22,"type":"cell"}
{"cell_type":"code","exec_count":24,"id":"510ced","input":"from sklearn.cluster import SpectralClustering\nclustering = SpectralClustering(n_clusters=3, random_state=11719,\n                                affinity='nearest_neighbors', n_neighbors=10)\nclustering.fit(X)\nlabels = clustering.labels_","metadata":{"colab":{},"colab_type":"code","id":"xz_RVhM90M7N"},"output":{"0":{"name":"stderr","output_type":"stream","text":"C:\\Users\\CGLaa\\Anaconda3\\lib\\site-packages\\sklearn\\manifold\\_spectral_embedding.py:236: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.\n  warnings.warn(\"Graph is not fully connected, spectral embedding\"\n"}},"pos":23,"type":"cell"}
{"cell_type":"code","exec_count":25,"id":"13fc82","input":"plt.scatter(X[:, 0], X[:, 1], c=labels,cmap=my_cmap)","metadata":{"colab":{},"colab_type":"code","id":"AYkam67_0M7P"},"output":{"0":{"data":{"text/plain":"<matplotlib.collections.PathCollection at 0x1e452a0aa48>"},"exec_count":25,"output_type":"execute_result"},"1":{"data":{"image/png":"75b6e1f287756fef5c5f03937f20e1f1a88eca17","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":24,"type":"cell"}
{"cell_type":"code","exec_count":26,"id":"ce9edc","input":"X1 = rs.normal((5.0/(2**0.5),5.0/(2**0.5)),1,size=(100, 2))\nrs.normal()\nX2 = rs.normal((5,0), 1, size=(100, 2))\nX3 = rs.normal((0,5), 1, size=(100, 2))\ny = np.repeat([0, 1, 2], 100)\nX = np.concatenate((X1, X2, X3))","metadata":{"colab":{},"colab_type":"code","id":"nHPKoZ7X0M7Q"},"pos":25,"type":"cell"}
{"cell_type":"code","exec_count":27,"id":"6ccf4c","input":"from sklearn.cluster import KMeans\nkmeans = KMeans(n_clusters=3, random_state=11719)\nkmeans.fit(X)\n\nlabels = kmeans.predict(X)\nprint(labels)","metadata":{"colab":{},"colab_type":"code","id":"PrOKg5mC78c0"},"output":{"0":{"name":"stdout","output_type":"stream","text":"[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0\n 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 2 2 2 2 2 2 2 0 2 2\n 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 2 2 2\n 2 2 2 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 2 2 2 2 2 2 2 2 2\n 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1\n 1 1 1 1]\n"}},"pos":26,"type":"cell"}
{"cell_type":"code","exec_count":28,"id":"bb948f","input":"my_cmap = sns.diverging_palette(255, 133, l=60, n=7, center=\"dark\", as_cmap=True)\n\nplt.scatter(X[:, 0], X[:, 1], c=y,cmap=my_cmap)\nplt.title('Colored by true classes')\nplt.show()\n\nplt.scatter(X[:, 0], X[:, 1], c=labels,cmap=my_cmap)\nplt.title('Colored by clusters of k-means')","metadata":{"colab":{},"colab_type":"code","id":"MCwROAiQ7-4A"},"output":{"0":{"data":{"image/png":"a82058e35bb41593e97cd4b3fde49528d513c2ef","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"1":{"data":{"text/plain":"Text(0.5, 1.0, 'Colored by clusters of k-means')"},"exec_count":28,"output_type":"execute_result"},"2":{"data":{"image/png":"7932d360c6b5fd599272c3c0e50e7a856fa26ee4","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":27,"type":"cell"}
{"cell_type":"code","exec_count":29,"id":"0ceb32","input":"from sklearn.neural_network import MLPClassifier\n\ndef load_testing():\n    mndata = MNIST('./data')\n    mndata.gz = True\n    X_test, labels_test = map(np.array, mndata.load_testing())\n    X_test = X_test / 255.0\n    return X_test, labels_test\n\nX_train, y_train = load_training()\nX_test, y_test = load_testing()","metadata":{"colab":{},"colab_type":"code","id":"P9mOEid-7-6z"},"pos":28,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"22b8e4","input":"# Accessing elements\n\n# get a single element \nprint(X[0, 0])\nprint(X[1, 1])\n\n# get a row \nprint(X[1])\n\n# get a column\nprint(X[:, 1])\n\n# Indexing by an array of integers\nindices = np.array([3, 1, 0])\nprint(X[:, indices])","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":136},"colab_type":"code","id":"-ZdO8why0M6b","outputId":"1e86524d-c3db-441e-f6ac-625901a60662"},"output":{"0":{"name":"stdout","output_type":"stream","text":"0.6964691855978616\n0.9807641983846155\n[0.42310646 0.9807642  0.68482974 0.4809319  0.39211752]\n[0.28613933 0.9807642  0.72904971]\n[[0.55131477 0.28613933 0.69646919]\n [0.4809319  0.9807642  0.42310646]\n [0.0596779  0.72904971 0.34317802]]\n"}},"pos":2,"type":"cell"}
{"cell_type":"code","exec_count":30,"id":"d350e7","input":"for i in range(10):\n    plt.imshow(X_train[i].reshape(28,28),cmap='gray')\n    plt.show()\n# X_train[0]","output":{"0":{"data":{"image/png":"5d92903100043321173b6eb5b4e7148102db13a9","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"1":{"data":{"image/png":"d8d32e4128e3185df0ba17b865ed9db1d4f175e3","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"2":{"data":{"image/png":"a600a2279eb31451984e9cce4f4b8e1356e11393","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"3":{"data":{"image/png":"a2047e0465cc0c2226f67d07a9233393ef717bc4","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"4":{"data":{"image/png":"ca15d51719a8191356245061e19d6be3a7a05bc7","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"5":{"data":{"image/png":"f56c3eb26d60457cc49c6650beb7d71276a794f9","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"6":{"data":{"image/png":"89a0e588fafe87d4935c1242818f06e611f7dae9","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"7":{"data":{"image/png":"105a49eca9ff79ff5740d8079e6ae307ac89796f","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"8":{"data":{"image/png":"102e809070e9aae8fb8ef6985d46d8bc71cd20d8","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"},"9":{"data":{"image/png":"5a3131d41a762a5895d9f17928688384cd8833e2","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":29,"type":"cell"}
{"cell_type":"code","exec_count":31,"id":"65bf27","input":"mlp = MLPClassifier(hidden_layer_sizes=(50,), max_iter=10, solver='sgd', verbose=10, tol=1e-4, random_state=11719,\n                    learning_rate_init=0.05)\n\nmlp.fit(X_train, y_train)\nprint(\"Training set score: %f\" % mlp.score(X_train, y_train))\nprint(\"Test set score: %f\" % mlp.score(X_test, y_test))","metadata":{"colab":{},"colab_type":"code","id":"LEma2PiR7_AG"},"output":{"0":{"name":"stdout","output_type":"stream","text":"Iteration 1, loss = 0.37217563\nIteration 2, loss = 0.18783110\nIteration 3, loss = 0.14296818\nIteration 4, loss = 0.11733725\nIteration 5, loss = 0.10016438\nIteration 6, loss = 0.08850300\nIteration 7, loss = 0.07903283\nIteration 8, loss = 0.07104032\nIteration 9, loss = 0.06470313\nIteration 10, loss = 0.05966878\n"},"1":{"name":"stderr","output_type":"stream","text":"C:\\Users\\CGLaa\\Anaconda3\\lib\\site-packages\\sklearn\\neural_network\\_multilayer_perceptron.py:571: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (10) reached and the optimization hasn't converged yet.\n  % self.max_iter, ConvergenceWarning)\n"},"2":{"name":"stdout","output_type":"stream","text":"Training set score: 0.984717\nTest set score: 0.971100\n"}},"pos":30,"type":"cell"}
{"cell_type":"code","exec_count":32,"id":"219a33","input":"import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\n\nclass MLPNet(nn.Module):\n    \n    def __init__(self):\n        super(MLPNet, self).__init__()\n        self.fc1 = nn.Linear(28*28, 500)\n        self.fc2 = nn.Linear(500, 256)\n        self.fc3 = nn.Linear(256, 10)\n        \n    def forward(self, x):\n        x = F.relu(self.fc1(x))\n        x = F.relu(self.fc2(x))\n        x = self.fc3(x)\n        return x\n    \nmodel = MLPNet()","metadata":{"colab":{},"colab_type":"code","id":"B031kOM87--V"},"pos":31,"type":"cell"}
{"cell_type":"code","exec_count":33,"id":"923249","input":"import torch.optim as optim\n\ncriterion = nn.CrossEntropyLoss()\n\nbatch_size = 100\nbatch_num = int(len(X_train) / batch_size)\noptimizer = optim.SGD(model.parameters(), lr=0.01, momentum=0.9)","pos":32,"type":"cell"}
{"cell_type":"code","exec_count":34,"id":"e078df","input":"for epoch in range(10):  # loop over the dataset multiple times\n\n    running_loss = 0.0\n    for i in range(batch_num):\n        # get the inputs\n        inputs = torch.from_numpy(X_train[(i*batch_size):((i+1)*batch_size)]).float()\n        labels = torch.from_numpy(y_train[(i*batch_size):((i+1)*batch_size)]).long()\n\n        # zero the parameter gradients\n        optimizer.zero_grad()\n\n        # forward + backward + optimize\n        outputs = model(inputs)\n        loss = criterion(outputs, labels)\n        loss.backward()\n        optimizer.step()\n\n        running_loss += loss.item()\n    # print statistics\n    print(f'Iteration {epoch+1}, loss = {running_loss / batch_num}')\n\nprint('Finished Training')","output":{"0":{"name":"stdout","output_type":"stream","text":"Iteration 1, loss = 0.6485924861331781\nIteration 2, loss = 0.23996205225897332\nIteration 3, loss = 0.1685180520763\nIteration 4, loss = 0.12850680087227373\nIteration 5, loss = 0.10204131761721025\nIteration 6, loss = 0.08323614351451397\nIteration 7, loss = 0.06896870821869622\nIteration 8, loss = 0.05788248574982087\nIteration 9, loss = 0.04887710014008917\nIteration 10, loss = 0.041611213845317255\nFinished Training\n"}},"pos":33,"type":"cell"}
{"cell_type":"code","exec_count":35,"id":"309ec8","input":"with torch.no_grad():\n    #for i in range(len(X_test)):\n    images = torch.from_numpy(X_test).float()\n    labels = torch.from_numpy(y_test).long()\n\n    outputs = model(images)\n    _, predicted = torch.max(outputs.data, 1)\n    total = labels.size(0)\n    correct = (predicted == labels).sum().item()\n\nprint(f'Accuracy of the network on the 10000 test images: {100 * correct / total}%')","output":{"0":{"name":"stdout","output_type":"stream","text":"Accuracy of the network on the 10000 test images: 97.59%\n"}},"pos":34,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"2f195e","input":"# Getting the shape and reshaping an array\n\n# Generating a random array\nrnd = np.random.RandomState(seed=123)\nX = rnd.uniform(low=0.0, high=1.0, size=(2, 3))  # a 3 x 5 array\n\nprint(X.shape)\nprint(X)\nprint('Reshaping')\nprint(X.reshape(3, 2))\nprint('Transposing')\nprint(X.T)","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":204},"colab_type":"code","id":"1rnaq-jg0M6d","outputId":"2b7564de-9f5c-4fdf-fbd0-1099910d2d13"},"output":{"0":{"name":"stdout","output_type":"stream","text":"(2, 3)\n[[0.69646919 0.28613933 0.22685145]\n [0.55131477 0.71946897 0.42310646]]\nReshaping\n[[0.69646919 0.28613933]\n [0.22685145 0.55131477]\n [0.71946897 0.42310646]]\nTransposing\n[[0.69646919 0.55131477]\n [0.28613933 0.71946897]\n [0.22685145 0.42310646]]\n"}},"pos":3,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"c1f250","input":"# Creating a row vector\n# of evenly spaced numbers over a specified interval.\n\ny = np.linspace(0, 12, 5)\nprint(y)","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":34},"colab_type":"code","id":"YaYanxZI0M6f","outputId":"831c1b3b-2fee-4cbb-a051-a6d2c8462e80"},"output":{"0":{"name":"stdout","output_type":"stream","text":"[ 0.  3.  6.  9. 12.]\n"}},"pos":4,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"a61229","input":"import numpy as np\nimport seaborn as sns\nimport pandas as pd\nfrom matplotlib import pyplot as plt\n%matplotlib inline\nfrom sklearn.preprocessing import StandardScaler\nsns.set()\n\n# construct cmap\nmy_cmap = sns.diverging_palette(145, 280, s=85, l=25, n=7, as_cmap=True)\n\nrs = np.random.RandomState(123)\nX = rs.multivariate_normal(mean=np.zeros(2), cov=np.array([[5, 2], [2, 1]]), size=500)\ny = X[:, 1] < 0\n\ndf = pd.DataFrame(X,columns = [\"x\",\"y\"])\ndf[\"val\"] = pd.Series(y)\nplt.scatter(x=df[\"x\"],y=df[\"y\"],c=df[\"val\"],cmap=my_cmap)\nplt.xlabel(\"feature 1\")\nplt.ylabel(\"feature 2\")","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":302},"colab_type":"code","id":"n2kS1zYE0M6h","outputId":"50eb0fc0-ce8f-4109-a3b3-fe9cb40b357f"},"output":{"0":{"data":{"text/plain":"Text(0, 0.5, 'feature 2')"},"exec_count":6,"output_type":"execute_result"},"1":{"data":{"image/png":"f7224c9930a247309665274c7605b313b8743913","text/plain":"<Figure size 432x288 with 1 Axes>"},"output_type":"display_data"}},"pos":5,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"9a96e9","input":"from sklearn.decomposition import PCA\npca = PCA(n_components=2)\nX_std = StandardScaler().fit_transform(X)\npca.fit(X_std)\nprint(pca.components_)\nX_pca = pca.transform(X_std)\n\nplt.scatter(X_pca[:, 0], X_pca[:, 1], c=y, linewidths=0, s=30,cmap=my_cmap)\nplt.ylim(-3, 3)\nplt.xlabel(\"first principal component\")\nplt.ylabel(\"second principal component\")\nplt.show()","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":323},"colab_type":"code","id":"bm7e57380M6j","outputId":"2a36bbae-050c-4728-baaa-fcdc5e667610"},"output":{"0":{"name":"stdout","output_type":"stream","text":"[[ 0.70710678  0.70710678]\n [-0.70710678  0.70710678]]\n"},"1":{"data":{"image/png":"ea548b7827411747eb2426c713494148918563e8","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":6,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"f30809","input":"from sklearn.datasets import load_iris\nfrom sklearn.decomposition import PCA\n\niris = load_iris()\nX = iris['data']\ny = iris['target']\nnames = iris['target_names']\nprint(X[:5])\nprint(names)","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":119},"colab_type":"code","id":"qAJci1bH0M6l","outputId":"870e88df-f0b0-4154-cdf7-244a7e7738cb"},"output":{"0":{"name":"stdout","output_type":"stream","text":"[[5.1 3.5 1.4 0.2]\n [4.9 3.  1.4 0.2]\n [4.7 3.2 1.3 0.2]\n [4.6 3.1 1.5 0.2]\n [5.  3.6 1.4 0.2]]\n['setosa' 'versicolor' 'virginica']\n"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"7e2ae6","input":"# Visualization with the first two features\nfor i, col in enumerate(('blue', 'red', 'green')):\n    plt.scatter(X[y==i, 0], X[y==i, 1], label=names[i], c=col)\nplt.xlabel('Feature 1')\nplt.ylabel('Feature 2')\nplt.legend(loc='best')","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":303},"colab_type":"code","id":"jBw619uu0M6p","outputId":"16ef9fac-42ce-4068-8569-cd882d9954ec"},"output":{"0":{"data":{"text/plain":"<matplotlib.legend.Legend at 0x1e4499e7a08>"},"exec_count":9,"output_type":"execute_result"},"1":{"data":{"image/png":"82a024a46241aaee90084ba600d79ebd2d4dc757","text/plain":"<Figure size 432x288 with 1 Axes>"},"metadata":{"needs_background":"light"},"output_type":"display_data"}},"pos":8,"type":"cell"}
{"cell_type":"code","id":"4041c3","input":"","pos":35,"type":"cell"}
{"id":0,"time":1580231215671,"type":"user"}
{"last_load":1579999950072,"type":"file"}