{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":136929280},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.4"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1580402445337,"exec_count":1,"id":"b70684","input":"import itertools\nimport logging\nimport math\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nsns.set()\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.datasets import fetch_lfw_people\n\nprint(__doc__)","kernel":"python3","no_halt":true,"output":{"0":{"name":"stdout","text":"Automatically created module for IPython interactive environment\n"}},"pos":0,"start":1580402436464,"state":"done","type":"cell"}
{"cell_type":"code","end":1580402445346,"exec_count":2,"id":"7667b5","input":"# Display progress logs on stdout\nlogging.basicConfig(level=logging.INFO,format='%(asctime)s %(message)s')","kernel":"python3","no_halt":true,"pos":1,"start":1580402445343,"state":"done","type":"cell"}
{"cell_type":"code","end":1580402445870,"exec_count":3,"id":"4a57c5","input":"lfw_people = fetch_lfw_people(min_faces_per_person=70, resize=0.4)","kernel":"python3","no_halt":true,"pos":2,"start":1580402445353,"state":"done","type":"cell"}
{"cell_type":"code","end":1580402445886,"exec_count":4,"id":"098695","input":"n_samples,h,w = lfw_people.images.shape\n\nX = lfw_people.data\nn_features = X.shape[1]\n\ny = lfw_people.target\ntarget_names = lfw_people.target_names\nn_classes = target_names.shape[0]","kernel":"python3","no_halt":true,"pos":3,"start":1580402445882,"state":"done","type":"cell"}
{"cell_type":"code","end":1580402445972,"exec_count":5,"id":"81903b","input":"print('Total dataset size:')\nprint(f'number of samples = {n_samples}')\nprint(f'number of features = {n_features}')\nprint(f'number of classes = {n_classes}')","kernel":"python3","no_halt":true,"output":{"0":{"name":"stdout","text":"Total dataset size:\nnumber of samples = 1288\nnumber of features = 1850\nnumber of classes = 7\n"}},"pos":4,"start":1580402445890,"state":"done","type":"cell"}
{"cell_type":"code","end":1580402446110,"exec_count":6,"id":"db94ca","input":"target_names","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"array(['Ariel Sharon', 'Colin Powell', 'Donald Rumsfeld', 'George W Bush',\n       'Gerhard Schroeder', 'Hugo Chavez', 'Tony Blair'], dtype='<U17')"},"exec_count":6}},"pos":5,"start":1580402445977,"state":"done","type":"cell"}
{"cell_type":"code","end":1580402449518,"exec_count":7,"id":"cf9a66","input":"X_data = []\ny_data = []\nM = 7\n\nmy_cmap = sns.cubehelix_palette(light=1, as_cmap=True)\n\nfor i in range(len(X)):\n    if y[i] == 3 or y[i] == 2:\n        X_data = X_data + [X[i]]\n        y_data = y_data + [y[i]]\ny_data = list(map(lambda x: 1 if x==3 else -1, y_data))\nprint(y_data[M:2*M])\nplt.figure(figsize=(16,20))\nfor i in range(M):\n    plt.subplot(1,M,i+1)\n    plt.imshow(X_data[i+7].reshape(h,w), cmap = 'gray')","kernel":"python3","no_halt":true,"output":{"0":{"name":"stdout","text":"[1, 1, 1, 1, 1, 1, 1]\n"},"1":{"data":{"image/png":"2304d0334ffeb6849015e543fb460c5038b8d995","text/plain":"<Figure size 1152x1440 with 7 Axes>"},"metadata":{"image/png":{"height":183,"width":928}}}},"pos":6,"start":1580402446118,"state":"done","type":"cell"}
{"cell_type":"code","end":1580402449531,"exec_count":8,"id":"f55ac5","input":"# Split into training/testing sets\nX_train,X_test,y_train,y_test = train_test_split(X_data,y_data,test_size=0.25,random_state=42)","kernel":"python3","no_halt":true,"pos":7,"start":1580402449525,"state":"done","type":"cell"}
{"cell_type":"code","end":1580402449650,"exec_count":9,"id":"7642b8","input":"# Bag of Patches\np = 3\nbags = []\nif (int(h/p) ==0 or int(w/p)==0):\n    print('p is too big, you dingus.')\nelse:\n    for pic in enumerate(X_train):\n        pic_arr = pic[1].reshape(h,w)\n        bags += [[]]\n        for i in range(int(h/p-p)):\n            for j in range(int(w/p-p)):\n#                 print(i,j)\n                bags[pic[0]] += [np.array(pic_arr[i:i+p,j:j+p])]","kernel":"python3","no_halt":true,"pos":8,"start":1580402449537,"state":"done","type":"cell"}
{"end":1580402449660,"exec_count":10,"id":"86e2eb","input":"def kernel_bag(bag1,bag2,sig):\n    total = 0\n    for patch1 in bag1:\n        for patch2 in bag2:\n            total += gauss_h(patch1/np.linalg.norm(patch1),patch2/np.linalg.norm(patch2),sig)\n    return total/len(bag1)**2","kernel":"python3","no_halt":true,"pos":11,"start":1580402449657,"state":"done","type":"cell"}
{"end":1580402449685,"exec_count":11,"id":"e44c2c","input":"def gauss_h(u,v,sigma):\n    if (sigma == 0):\n        print('What...? WHAT?! No, no, no! NO! SIGMA IS ZERO! WHAT HAVE YOU DONE?! YOU HAVE DOOMED US A-')\n        print('*Well, it seems you have doomed that world to live out eternity slowly travelling towards a singularity...*')\n        print(\"*Why don't you try again, but this time without destroying an entire civiliation, kay?*\")\n    else:\n        return math.e**(-np.linalg.norm(u-v)**2/sigma**2)","kernel":"python3","no_halt":true,"pos":11.5,"start":1580402449666,"state":"done","type":"cell"}
{"end":1580402449758,"exec_count":14,"id":"fefb90","input":"[[] for i in range(3)]","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"[[], [], []]"},"exec_count":14}},"pos":14,"start":1580402449751,"state":"done","type":"cell"}
{"end":1580402450189,"exec_count":15,"id":"c9800e","input":"means = np.repeat(np.zeros())","kernel":"python3","no_halt":true,"output":{"0":{"ename":"TypeError","evalue":"Required argument 'shape' (pos 1) not found","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-15-6c3e055afdda>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mmeans\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrepeat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mzeros\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mTypeError\u001b[0m: Required argument 'shape' (pos 1) not found"]}},"pos":15,"start":1580402449765,"state":"done","type":"cell"}
{"end":1580402450204,"exec_count":16,"id":"b32665","input":"A = 'a b c'.split()\nfor a1, a2 in itertools.product(A,A):\n    print(a1,a2)","kernel":"python3","no_halt":true,"output":{"0":{"name":"stdout","text":"a a\na b\na c\nb a\nb b\nb c\nc a\nc b\nc c\n"}},"pos":16,"start":1580402450196,"state":"done","type":"cell"}
{"end":1580402450279,"exec_count":18,"id":"5a4680","input":"y = 3\nnp.linspace(0,y-1,y,dtype=int)","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"array([0, 1, 2])"},"exec_count":18}},"pos":18,"start":1580402450261,"state":"done","type":"cell"}
{"end":1580402450306,"exec_count":19,"id":"a48221","input":"y = np.zeros(3)\nz = np.random.randint(3,size=2)\nprint(np.concatenate((y,z)))","kernel":"python3","no_halt":true,"output":{"0":{"name":"stdout","text":"[0. 0. 0. 1. 1.]\n"}},"pos":19,"start":1580402450284,"state":"done","type":"cell"}
{"end":1580402450347,"exec_count":20,"id":"d14a50","input":"a = [1, 2, 3,\n    4, 5];a","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"[1, 2, 3, 4, 5]"},"exec_count":20}},"pos":20,"start":1580402450312,"state":"done","type":"cell"}
{"end":1580402450381,"exec_count":21,"id":"1cd569","input":"print('hello\\\\\n       i want to break this apart')","kernel":"python3","no_halt":true,"output":{"0":{"ename":"SyntaxError","evalue":"EOL while scanning string literal (<ipython-input-21-a83d625a9d2d>, line 1)","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-21-a83d625a9d2d>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    print('hello\\\\\u001b[0m\n\u001b[0m                  ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m EOL while scanning string literal\n"]}},"pos":21,"start":1580402450358,"state":"done","type":"cell"}
{"end":1580403972564,"exec_count":54,"id":"28af2b","input":"A = 'a b c'.split()\nB = 'a b c d'.split()\nprint(np.all(A != B))\nB.remove('d')\nprint(np.all(A != B))","kernel":"python3","output":{"0":{"name":"stdout","text":"True\nFalse\n"}},"pos":17,"start":1580403972548,"state":"done","type":"cell"}
{"end":1580404190958,"exec_count":63,"id":"c69ee0","input":"def K_means(k_data, k_clusters = 2, ker = None):\n\n    if (ker is None):\n        raise Exception('Please specify what kernel you are using for k-means.')\n    # Assign random labels\n    if (k_clusters > len(k_data)):\n        raise Exception(f'You expect more clusters than data?...' +\n                        'Seems improbable. #DataElts = {len(k_data)} < #clusters = {k_clusters}')\n\n    #We make sure that every cluster has at least one element\n    current_labels = np.concatenate((np.linspace(0,k_clusters-1,k_clusters,dtype=int),\n                                       np.random.randint(2, size=len(k_data)-k_clusters)))\n    prev_labels = np.zeros(len(k_data),dtype=int)\n    mu_norms = []\n    cluster_vecs = [[] for i in range(k_clusters)]\n\n    # Is this guaranteed to terminate?\n    # Terminates when labels remain unchanged\n    while(np.any(prev_labels != current_labels)):\n        prev_labels = current_labels[:]\n\n        print('here 1')\n        # Group clusters for mean computations\n        for i,v in enumerate(k_data):\n             cluster_vecs[current_labels[i]].append(v)\n\n        print('here 2')\n        # d(\\mu, \\phi(x)) = ||\\mu-\\phi(x)||_{H}^2 = <\\mu, \\mu> + 2<\\mu, \\phi(x)> + <\\phi(x),\\phi(x)>\n        # Hence, d(\\mu, \\phi(x)) = 1/n^2 \\sum_{i,j} ker(x_i,x_j) + 2 \\sum_{i} ker(x_i,x) + ker(x,x)\n\n        # Firstly, compute ||\\mu||_H^2 = \\sum_{i,j} ker(x_i,x_j) for each cluster\n\n        for i,c in enumerate(cluster_vecs):\n            mu_norms.append(0)\n            for c1, c2 in itertools.product(c,c):\n                mu_norms[i] += ker(c1,c2)\n            mu_norms[i] /= len(c)**2\n\n        print('here 3')\n        # Relabel according to distance to means\n        for i,v in enumerate(k_data):\n            # Compute <\\mu, \\phi(x)> and <\\phi(x),\\phi(x)> -- I am sorry for using x over v :(\n            cur_label = cluster_vecs[current_lebels[i]]\n            mu_dot_v = sum(list(map(lambda x: ker(x,v), cluster_vecs[cur_label])))/len(cluster_vecs[cur_label])\n            v_dot_v = ker(v,v)\n\n            min_dist = mu_norm[cur_label] + 2*mu_dot_v + v_dot_v\n            #Inefficiency because we compute the distance to its current mean twice...\n            for j, c in enumerate(cluster_vecs):\n                # Vary over mu\n                mu_dot_v = sum(list(map(lambda x: ker(x,v), cluster_vecs[j])))/len(cluster_vecs[j])\n\n                cur_dist = mu_norm[j] + 2*mu_dot_v + v_dot_v\n                if(cur_dist < min_dist):\n                    current_labels[i] = j\n\n    # Compute the errors\n    errors = np.zeros(k_clusters)\n    # (Still need to implement...)\n    for i, c in enumerate(cluster_vecs):\n        print(f'we here, boyzz {i}, {c}')\n        for v in c:\n            mu_dot_v = sum(list(map(lambda x: ker(x,v), c)))/len(c)\n            v_dot_v = ker(v,v)\n            errors[i] += mu_norms[i] + 2*mu_dot_v + v_dot_v\n            print(errors[i])\n\n    return (current_labels,errors)","kernel":"python3","pos":12,"start":1580404190949,"state":"done","type":"cell"}
{"end":1580404233845,"exec_count":64,"id":"34a4a9","input":"scl = 10\n# rand_sigs = sorted([scl*np.random.rand() for i in range(10)])\nrand_sigs = [1]\nsig_err = []\n\nfor sigma in rand_sigs:\n    def k_bag_sig(u,v):\n        return kernel_bag(u,v,sigma)\n    labels,err = K_means(bags, ker=k_bag_sig)\n    labels = np.array(list(map(lambda x: 1 if x==1 else -1, labels)))\n    if(len(list(filter(lambda x: x == 0, labels+y_train))) > len(list(filter(lambda x: x == 0, labels-y_train)))):\n        labels = -labels\n#     print(len(list(filter(lambda x: x == 0, labels-y_train))))\n    sig_err.append((sigma,err))\nprint(sig_err)","kernel":"python3","output":{"0":{"name":"stdout","text":"here 1\nhere 2\n"},"1":{"ename":"KeyboardInterrupt","evalue":"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-64-4dd288f8ed07>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      7\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mk_bag_sig\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mu\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mv\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mkernel_bag\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mu\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mv\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0msigma\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m     \u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0merr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mK_means\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbags\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mker\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mk_bag_sig\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m     \u001b[0mlabels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m==\u001b[0m\u001b[0;36m1\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m     \u001b[0;32mif\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mx\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mx\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-63-588788e56d99>\u001b[0m in \u001b[0;36mK_means\u001b[0;34m(k_data, k_clusters, ker)\u001b[0m\n\u001b[1;32m     34\u001b[0m             \u001b[0mmu_norms\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     35\u001b[0m             \u001b[0;32mfor\u001b[0m \u001b[0mc1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mc2\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mitertools\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mproduct\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mc\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 36\u001b[0;31m                 \u001b[0mmu_norms\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0mker\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mc1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mc2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     37\u001b[0m             \u001b[0mmu_norms\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m/=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     38\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-64-4dd288f8ed07>\u001b[0m in \u001b[0;36mk_bag_sig\u001b[0;34m(u, v)\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0msigma\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrand_sigs\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mk_bag_sig\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mu\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mv\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mkernel_bag\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mu\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mv\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0msigma\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m     \u001b[0mlabels\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0merr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mK_means\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbags\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mker\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mk_bag_sig\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m     \u001b[0mlabels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;36m1\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m==\u001b[0m\u001b[0;36m1\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-10-5c6d3dae27d1>\u001b[0m in \u001b[0;36mkernel_bag\u001b[0;34m(bag1, bag2, sig)\u001b[0m\n\u001b[1;32m      3\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mpatch1\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mbag1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mpatch2\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mbag2\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m             \u001b[0mtotal\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0mgauss_h\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpatch1\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinalg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnorm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpatch1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mpatch2\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinalg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnorm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpatch2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0msig\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mtotal\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbag1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<__array_function__ internals>\u001b[0m in \u001b[0;36mnorm\u001b[0;34m(*args, **kwargs)\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}},"pos":13,"scrolled":true,"start":1580404194057,"state":"done","type":"cell"}
{"id":"c11607","input":"","pos":22,"type":"cell"}
{"id":0,"time":1580400578066,"type":"user"}
{"last_load":1580001722009,"type":"file"}