{"backend_state":"running","kernel":"python3","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":253599744},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.4"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1580243154982,"exec_count":1,"id":"b70684","input":"import logging\nimport math\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.datasets import fetch_lfw_people\n\nprint(__doc__)","kernel":"python3","no_halt":true,"output":{"0":{"name":"stdout","text":"Automatically created module for IPython interactive environment\n"}},"pos":0,"start":1580243148362,"state":"done","type":"cell"}
{"cell_type":"code","end":1580243154992,"exec_count":2,"id":"7667b5","input":"# Display progress logs on stdout\nlogging.basicConfig(level=logging.INFO,format='%(asctime)s %(message)s')","kernel":"python3","no_halt":true,"pos":1,"start":1580243154988,"state":"done","type":"cell"}
{"cell_type":"code","end":1580243155110,"exec_count":3,"id":"4a57c5","input":"lfw_people = fetch_lfw_people(min_faces_per_person=70, resize=0.4)","kernel":"python3","no_halt":true,"pos":2,"start":1580243154998,"state":"done","type":"cell"}
{"cell_type":"code","end":1580243155142,"exec_count":4,"id":"098695","input":"n_samples,h,w = lfw_people.images.shape\n\nX = lfw_people.data\nn_features = X.shape[1]\n\ny = lfw_people.target\ntarget_names = lfw_people.target_names\nn_classes = target_names.shape[0]","kernel":"python3","no_halt":true,"pos":3,"start":1580243155118,"state":"done","type":"cell"}
{"cell_type":"code","end":1580243155156,"exec_count":5,"id":"81903b","input":"print('Total dataset size:')\nprint(f'number of samples = {n_samples}')\nprint(f'number of features = {n_features}')\nprint(f'number of classes = {n_classes}')","kernel":"python3","no_halt":true,"output":{"0":{"name":"stdout","text":"Total dataset size:\nnumber of samples = 1288\nnumber of features = 1850\nnumber of classes = 7\n"}},"pos":4,"start":1580243155149,"state":"done","type":"cell"}
{"cell_type":"code","end":1580243155187,"exec_count":6,"id":"db94ca","input":"target_names","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"array(['Ariel Sharon', 'Colin Powell', 'Donald Rumsfeld', 'George W Bush',\n       'Gerhard Schroeder', 'Hugo Chavez', 'Tony Blair'], dtype='<U17')"},"exec_count":6}},"pos":5,"start":1580243155160,"state":"done","type":"cell"}
{"cell_type":"code","end":1580243158232,"exec_count":7,"id":"cf9a66","input":"X_data = []\ny_data = []\nM = 7\n\nmy_cmap = sns.cubehelix_palette(light=1, as_cmap=True)\n\nfor i in range(len(X)):\n    if y[i] == 3 or y[i] == 2:\n        X_data = X_data + [X[i]]\n        y_data = y_data + [y[i]]\ny_data = list(map(lambda x: 1 if x==3 else -1, y_data))\nprint(y_data[M:2*M])\nplt.figure(figsize=(16,20))\nfor i in range(M):\n    plt.subplot(1,M,i+1)\n    plt.imshow(X_data[i+7].reshape(h,w), cmap = 'gray')","kernel":"python3","no_halt":true,"output":{"0":{"name":"stdout","text":"[1, 1, 1, 1, 1, 1, 1]\n"},"1":{"data":{"image/png":"2304d0334ffeb6849015e543fb460c5038b8d995","text/plain":"<Figure size 1152x1440 with 7 Axes>"},"metadata":{"image/png":{"height":183,"width":928}}}},"pos":6,"start":1580243155193,"state":"done","type":"cell"}
{"cell_type":"code","end":1580243158262,"exec_count":8,"id":"f55ac5","input":"# Split into training/testing sets\nX_train,X_test,y_train,y_test = train_test_split(X_data,y_data,test_size=0.25,random_state=42)","kernel":"python3","no_halt":true,"pos":7,"start":1580243158246,"state":"done","type":"cell"}
{"cell_type":"code","end":1580243158555,"exec_count":9,"id":"7642b8","input":"# Bag of Patches\np = 3\nbags = []\nif (int(h/p) ==0 or int(w/p)==0):\n    print('p is too big, you dingus.')\nelse:\n    for pic in enumerate(X_train):\n        pic_arr = pic[1].reshape(h,w)\n        bags += [[]]\n        for i in range(int(h/p-p)):\n            for j in range(int(w/p-p)):\n#                 print(i,j)\n                bags[pic[0]] += [np.array(pic_arr[i:i+p,j:j+p])]","kernel":"python3","no_halt":true,"pos":8,"start":1580243158273,"state":"done","type":"cell"}
{"end":1580243158567,"exec_count":10,"id":"86e2eb","input":"def kernel_bag(bag1,bag2,sig):\n    total = 0\n    for patch1 in bag1:\n        for patch2 in bag2:\n            total += gauss_h(patch1/np.linalg.norm(patch1),patch2/np.linalg.norm(patch2),sig)\n    return total/len(bag1)**2","kernel":"python3","no_halt":true,"pos":11,"start":1580243158562,"state":"done","type":"cell"}
{"end":1580243158604,"exec_count":11,"id":"e44c2c","input":"def gauss_h(u,v,sigma):\n    if (sigma == 0):\n        print('What...? WHAT?! No, no, no! NO! SIGMA IS ZERO! WHAT HAVE YOU DONE?! YOU HAVE DOOMED US A-')\n        print('*Well, it seems you have doomed that world to live out eternity slowly travelling towards a singularity...*')\n        print(\"*Why don't you try again, but this time without destroying an entire civiliation, kay?*\")\n    else:\n        return math.e**(-np.linalg.norm(u-v)**2/sigma**2)","kernel":"python3","no_halt":true,"pos":11.5,"start":1580243158574,"state":"done","type":"cell"}
{"end":1580243159242,"exec_count":14,"id":"fefb90","input":"[[] for i in range(3)]","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"[[], [], []]"},"exec_count":14}},"pos":14,"start":1580243159201,"state":"done","type":"cell"}
{"end":1580243159268,"exec_count":15,"id":"c9800e","input":"means = np.repeat(np.zeros())","kernel":"python3","no_halt":true,"output":{"0":{"ename":"TypeError","evalue":"Required argument 'shape' (pos 1) not found","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-15-6c3e055afdda>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mmeans\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrepeat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mzeros\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mTypeError\u001b[0m: Required argument 'shape' (pos 1) not found"]}},"pos":15,"start":1580243159248,"state":"done","type":"cell"}
{"end":1580243159360,"exec_count":16,"id":"b32665","input":"np.linspace(0,2,2)","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"array([0., 2.])"},"exec_count":16}},"pos":16,"start":1580243159276,"state":"done","type":"cell"}
{"end":1580243159459,"exec_count":17,"id":"28af2b","input":"s = 'a b c'.split()\n# for i,l in enumerate(s):\n#     print(i, l)\ns.append('d');s","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"['a', 'b', 'c', 'd']"},"exec_count":17}},"pos":17,"start":1580243159455,"state":"done","type":"cell"}
{"end":1580243159471,"exec_count":18,"id":"5a4680","input":"y = 3\nnp.linspace(0,y-1,y,dtype=int)","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"array([0, 1, 2])"},"exec_count":18}},"pos":18,"start":1580243159465,"state":"done","type":"cell"}
{"end":1580243159498,"exec_count":19,"id":"a48221","input":"y = np.zeros(3)\nz = np.random.randint(3,size=2)\nprint(np.concatenate((y,z)))","kernel":"python3","no_halt":true,"output":{"0":{"name":"stdout","text":"[0. 0. 0. 0. 1.]\n"}},"pos":19,"start":1580243159476,"state":"done","type":"cell"}
{"end":1580243159547,"exec_count":20,"id":"d14a50","input":"a = [1, 2, 3,\n    4, 5];a","kernel":"python3","no_halt":true,"output":{"0":{"data":{"text/plain":"[1, 2, 3, 4, 5]"},"exec_count":20}},"pos":20,"start":1580243159505,"state":"done","type":"cell"}
{"end":1580243159569,"exec_count":21,"id":"1cd569","input":"print('hello\\\\\n       i want to break this apart')","kernel":"python3","no_halt":true,"output":{"0":{"ename":"SyntaxError","evalue":"EOL while scanning string literal (<ipython-input-21-a83d625a9d2d>, line 1)","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-21-a83d625a9d2d>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    print('hello\\\\\u001b[0m\n\u001b[0m                  ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m EOL while scanning string literal\n"]}},"pos":21,"start":1580243159554,"state":"done","type":"cell"}
{"end":1580244100952,"exec_count":61,"id":"34a4a9","input":"scl = 10\n# rand_sigs = [scl*np.random.rand() for i in range(10)]\nrand_sigs = [1]\nsig_err = []\n\nfor sigma in rand_sigs:\n    def k_bag_sig(u,v):\n        return kernel_bag(u,v,sigma)\n    labels,err = K_means(bags, ker=k_bag_sig)\n    labels = np.array(list(map(lambda x: 1 if x==1 else -1, labels)))\n    if(len(list(filter(lambda x: x == 0, labels+y_train))) < len(list(filter(lambda x: x == 0, labels-y_train)))):\n        labels = -labels\n    sig_err.append((sigma,err))\nprint(sig_err)\n#     print(len(list(filter(lambda x: x == 0, labels-y_train))))","kernel":"python3","output":{"0":{"name":"stdout","text":"[(1, array([0., 0.]))]\n"}},"pos":13,"scrolled":true,"start":1580244100942,"state":"done","type":"cell"}
{"end":1580244109648,"exec_count":62,"id":"c69ee0","input":"def K_means(k_data, k_clusters = 2, ker = None):\n\n    if (ker is None):\n        raise Exception('Please specify what kernel you are using for k-means.')\n    # Assign random labels\n    if (k_clusters > len(k_data)):\n        raise Exception(f'You expect more clusters than data?...' +\n                        'Seems improbable. #DataElts = {len(k_data)} < #clusters = {k_clusters}')\n\n    #We make sure that every cluster has at least one element\n    current_labels = np.concatenate((np.linspace(0,k_clusters-1,k_clusters,dtype=int),\n                                       np.random.randint(2, size=len(k_data)-k_clusters)))\n    prev_labels = np.zeros(len(k_data),dtype=int)\n\n    # Is this guaranteed to terminate?\n    # Terminates when labels remain unchanged\n    while(np.all(prev_labels != current_labels)):\n        prev_labels = current_labels[:]\n        cluster_vecs = [[] for i in range(k_clusters)]\n\n        # Group clusters for mean computations\n        for i,v in enumerate(k_data):\n             cluster_vecs[current_labels[i]].append(v)\n\n        # Relabel according to distance to means\n        for i,v in enumerate(k_data):\n            min_dist = sum(list(map(lambda x: ker(x-v,x-v),cluster_vecs[current_labels[i]])))\n            /len(cluster_vecs[current_labels[i]])\n            #Inefficiency because we compute the distance to its current mean twice...\n            for j, c in enumerate(cluster_vecs):\n                cur_dist = sum(list(map(lambda x: ker(x-v,x-v),c)))/len(c)\n                if(cur_dist < min_dist):\n                    current_labels[i] = j\n\n    cluster_vecs = [[] for i in range(k_clusters)]\n    # Group clusters for mean computations\n    for i,v in enumerate(k_data):\n         cluster_vecs[current_labels[i]].append(v)\n\n    # Compute the errors\n    errors = np.zeros(k_clusters)\n    # (Still need to implement...)\n#     for i, c in enumerate(cluster_vecs):\n#         print(i)\n#         errors[i] = sum(list(map(lambda v: sum(list(map(lambda x: ker(np.array(x)-np.array(v),np.array(x)-np.array(v)),c))), c)))\n    return (current_labels,errors)","kernel":"python3","pos":12,"start":1580244109642,"state":"done","type":"cell"}
{"id":"c11607","input":"","pos":22,"type":"cell"}
{"id":0,"time":1580400578066,"type":"user"}
{"last_load":1580001722009,"type":"file"}